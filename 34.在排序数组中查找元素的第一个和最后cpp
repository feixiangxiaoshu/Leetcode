#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#include<queue>
#include<stack>
#include<map>
#include<math.h>
#include <unordered_set>
#include <unordered_map>
#include <set>
#include <cstring>
#include <sstream>
using namespace std;

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};



class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res;
        if(nums.size()==0){
            res.push_back(-1);
            res.push_back(-1);
            return res;
        }
        int left=findleft(nums,target);
        int right=findright(nums,target);
        res.push_back(left);
        res.push_back(right);
        return res;

    }
    int findleft(vector<int>&nums,int target){
        int left=0;int right=nums.size();
        int mid=-1;
        while(left<right){
            mid=left+(right-left)/2;
            if(nums[mid]==target){
                right=mid;
            }else if(nums[mid]<target){
                left=mid+1;
            }else if(nums[mid]>target){
                right=mid;
            }
        }
        if(left==nums.size()) return -1;
        return nums[left]==target? left : -1;
    }
    int findright(vector<int>&nums,int target){
        int left=0;int right=nums.size();
        int mid=-1;
        while(left<right){
            mid=left+(right-left)/2;
            if(nums[mid]==target){
                left=mid+1;
            }else if(nums[mid]<target){
                left=mid+1;
            }else if(nums[mid]>target){
                right=mid;
            }
        }
        if(left==0) return -1; // 为了避免越界
        return nums[left-1]==target? left-1 : -1;
    }

};

int main(){
    Solution s;
    vector<int> res;
    vector<int> tmp;
    int arr[1]={1};
    for(int i=0;i<1;i++){
        res.push_back(arr[i]);
    }
    tmp=s.searchRange(res,1);
    //cout<<tmp.size();
    cout<<tmp[0]<<" "<<tmp[1];
}